(defun load-input (file-path)
  (with-temp-buffer
    (insert-file-contents file-path)
    (buffer-string)))

(defun parse-input (input-string)
  (thread-last (split-string input-string ",")
    (mapcar 'string-to-number)))

(defun opcode-to-op (n)
  (cond ((= n 1) '+)
        ((= n 2) '*)
        ((= n 99) "finish")
        (t "bad")))

(defun parse-instruction (n)
  (let ((opcode (mod n 100))
        (m1 (mod (/ n 100) 10))
        (m2 (mod (/ n 1000) 10))
        (m3 (mod (/ n 10000) 10)))
    (list opcode m1 m2 m3)))

(defun program-to-table (program)
  (let ((table (make-hash-table))
        (i 0))
    (dolist (n program)
      (puthash i n table)
      (setq i (1+ i)))
    table))

(defun get-input ()
  (string-to-number (read-string "input pls: ")))

(defun run (program)
  (let ((result nil)
        (table (program-to-table program))
        (i 0)
        (done nil))
    (while (not done)
      (let* ((instruction (parse-instruction (gethash i table)))
             (opcode (first instruction))
             (m1 (= (second instruction) 0))
             (m2 (= (third instruction) 0))
             (m3 (= (fourth instruction) 0)))
        (cond ((= opcode 1)
               (let* ((a-pos (gethash (1+ i) table))
                      (a (if m1
                             (gethash a-pos table)
                           a-pos))
                      (b-pos (gethash (+ 2 i) table))
                      (b (if m2
                             (gethash b-pos table)
                           b-pos))
                      (out (gethash (+ 3 i) table)))
                 (puthash out (+ a b) table))
               (setq i (+ 4 i)))
              ((= opcode 2)
               (let* ((a-pos (gethash (1+ i) table))
                      (a (if m1
                             (gethash a-pos table)
                           a-pos))
                      (b-pos (gethash (+ 2 i) table))
                      (b (if m2
                             (gethash b-pos table)
                           b-pos))
                      (out (gethash (+ 3 i) table)))
                 (puthash out (* a b) table))
               (setq i (+ 4 i)))
              ((= opcode 3)
               (let ((in (get-input))
                     (out (gethash (1+ i) table)))
                 (puthash out in table))
               (setq i (+ 2 i)))
              ((= opcode 4)
               (let ((pos (gethash (1+ i) table)))
                 (print (gethash pos table)))
               (setq i (+ 2 i)))
              ((= opcode 5)
               (let ((param1 (gethash (1+ i) table))
                     (param2 (gethash (+ 2 i) table)))
                 (if (not (= param 0))
                     (setq i param2)
                   (setq i (+ 3 i)))))
              ((= opcode 6)
               (let ((param1 (gethash (1+ i) table))
                     (param2 (gethash (+ 2 i) table)))
                 (if (= param 0)
                     (setq i param2)
                   (setq i (+ 3 i)))))
              ((= opcode 7)
               (let ((param1 (gethash (1+ i) table))
                     (param2 (gethash (+ 2 i) table))
                     (param3 (gethash (+ 3 i) table)))
                 (if (< param1 param2)
                     (puthash param3 1 table)
                   (puthash param3 0 table))
                 (setq i (+ 4 i))))
              ((= opcode 8)
               (let ((param1 (gethash (1+ i) table))
                     (param2 (gethash (+ 2 i) table))
                     (param3 (gethash (+ 3 i) table)))
                 (print instruction)
                 (print (list '= param1 param2 '=> param3))
                 (if (= param1 param2)
                     (puthash param3 1 table)
                   (puthash param3 0 table))
                 (setq i (+ 4 i))))
              ((= opcode 99)
               (setq result (gethash 0 table))
               (setq done t)))))
    result))

(run (parse-input "1,9,10,3,2,3,11,0,99,30,40,50"))
(run (parse-input "1,0,0,0,99"))
(run (parse-input "2,3,0,3,99"))
(run (parse-input "2,4,4,5,99,0"))
(run (parse-input "1,1,1,4,99,5,6,0,99"))
(run (parse-input "1002,4,3,4,33"))
(run (parse-input "1101,100,-1,4,0"))
(run (parse-input "3,0,4,0,99"))

(run (parse-input "3,9,8,9,10,9,4,9,99,-1,8"))
(run (parse-input "3,9,7,9,10,9,4,9,99,-1,8"))

(thread-first "input"
  load-input
  parse-input
  run)

(parse-instruction 1002)

(setq test-program '(1002 4 3 4 33))
